shiny::runApp()
runApp()
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
library(shiny)
library(plotly)
ui <- fluidPage(
downloadButton('ExportPlot', 'Export as png'),
plotlyOutput("plot")
)
server <- function(input, output) {
# generate the plot
thePlot <- reactive({
p <- plot_ly(mtcars, x = ~mpg, y = ~wt)
})
# renderPlotly()
output$plot <- renderPlotly({
thePlot()
})
# download
output$ExportPlot <- downloadHandler(
# file name
filename <- 'plot.png',
# content
content = function(file){
# create plot
export(p = thePlot(), file = 'tempPlot.png')
# hand over the file
file.copy('tempPlot.png',file)
}
)
}
shinyApp(ui, server)
webshot("temp.html", file = "Rplot.png",
cliprect = "viewport")
library(htmlwidgets)
library(webshot)
